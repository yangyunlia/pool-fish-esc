C51 COMPILER V9.60.7.0   FW_TIM                                                            10/18/2024 22:44:45 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE FW_TIM
OBJECT MODULE PLACED IN .\Objects\fw_tim.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE FwLib_STC8\src\fw_tim.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\FwLib_ST
                    -C8\include) DEFINE(__CX51__,__CONF_MCU_MODEL=MCU_MODEL_STC8H1K28,__CONF_FOSC=24000000UL) DEBUG OBJECTEXTEND PRINT(.\List
                    -ings\fw_tim.lst) OBJECT(.\Objects\fw_tim.obj)

line level    source

   1          // Copyright 2021 IOsetting <iosetting(at)outlook.com>
   2          //
   3          // Licensed under the Apache License, Version 2.0 (the "License");
   4          // you may not use this file except in compliance with the License.
   5          // You may obtain a copy of the License at
   6          //
   7          //     http://www.apache.org/licenses/LICENSE-2.0
   8          //
   9          // Unless required by applicable law or agreed to in writing, software
  10          // distributed under the License is distributed on an "AS IS" BASIS,
  11          // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  12          // See the License for the specific language governing permissions and
  13          // limitations under the License.
  14          
  15          #include "fw_tim.h"
  16          #include "fw_sys.h"
  17          #include "fw_util.h"
  18          
  19          /**
  20           * Calculate the initial value of Timer0 & Timer1 counter
  21           * - If the frequency is too high, it will return the value of `limit`, so the timer
  22           *   will run in the highest frequency
  23           * - If the frequency is too low, it will return 0, so the timer will run in the 
  24           *   lowest possible frequency
  25          */
  26          int16_t TIM_Timer0n1_CalculateInitValue(uint16_t frequency, HAL_State_t freq1t, uint16_t limit)
  27          {
  28   1          uint32_t value = __SYSCLOCK;
  29   1          if (!freq1t)
  30   1              value = value / 12;
  31   1          value = value / frequency;
  32   1          if (value > limit)
  33   1              return 0;
  34   1          else
  35   1              return limit - value;
  36   1      }
  37          
  38          void TIM_Timer0_Config(HAL_State_t freq1t, TIM_TimerMode_t mode, uint16_t frequency)
  39          {
  40   1          uint16_t init;
  41   1          TIM_Timer0_Set1TMode(freq1t);
  42   1          TIM_Timer0_SetMode(mode);
  43   1          if (mode == TIM_TimerMode_8BitAuto)
  44   1          {
  45   2              init = TIM_Timer0n1_CalculateInitValue(frequency, freq1t, 0xFF);
  46   2              TIM_Timer0_SetInitValue(init & 0xFF, init & 0xFF);
  47   2          }
  48   1          else
  49   1          {
  50   2              init = TIM_Timer0n1_CalculateInitValue(frequency, freq1t, 0xFFFF);
  51   2              TIM_Timer0_SetInitValue(init >> 8, init & 0xFF);
  52   2          }
  53   1      }
C51 COMPILER V9.60.7.0   FW_TIM                                                            10/18/2024 22:44:45 PAGE 2   

  54          
  55          void TIM_Timer1_Config(HAL_State_t freq1t, TIM_TimerMode_t mode, uint16_t frequency)
  56          {
  57   1          uint16_t init;
  58   1          TIM_Timer1_Set1TMode(freq1t);
  59   1          TIM_Timer1_SetMode(mode);
  60   1          if (mode == TIM_TimerMode_8BitAuto)
  61   1          {
  62   2              init = TIM_Timer0n1_CalculateInitValue(frequency, freq1t, 0xFF);
  63   2              TIM_Timer1_SetInitValue(init & 0xFF, init & 0xFF);
  64   2          }
  65   1          else
  66   1          {
  67   2              init = TIM_Timer0n1_CalculateInitValue(frequency, freq1t, 0xFF);
  68   2              TIM_Timer1_SetInitValue(init >> 8, init & 0xFF);
  69   2          }
  70   1      }
  71          
  72          int16_t _TIM_Timer234_InitValueCalculate(
  73              uint16_t frequency, uint8_t prescaler, HAL_State_t freq1t)
  74          {
  75   1          uint32_t value = __SYSCLOCK;
  76   1          if (!freq1t)
  77   1              value = value / 12;
  78   1          value = value / ((prescaler + 1) * frequency);
  79   1      
  80   1          if (value > 0xFFFF)
  81   1              return 0;
  82   1          else
  83   1              return 0xFFFF - value;
  84   1      }
  85          
  86          /**
  87           * Timer2,3,4 Configuration
  88           * 
  89           * 1. no interrupt priority
  90           * 2. frequency = SYSCLK / (TMxPS + 1) / (0xFFFF - TxH,TxL) / (1T? 1 : 12)
  91          */
  92          
  93          void TIM_Timer2_Config(HAL_State_t freq1t, uint8_t prescaler, uint16_t frequency)
  94          {
  95   1          uint16_t init = _TIM_Timer234_InitValueCalculate(frequency, prescaler, freq1t);
  96   1          TIM_Timer2_Set1TMode(freq1t);
  97   1          TIM_Timer2_SetPreScaler(prescaler);
  98   1          TIM_Timer2_SetInitValue(init >> 8, init & 0xFF);
  99   1      }
 100          
 101          void TIM_Timer3_Config(
 102              HAL_State_t freq1t, uint8_t prescaler, uint16_t frequency, HAL_State_t intState)
 103          {
 104   1          uint16_t init = _TIM_Timer234_InitValueCalculate(frequency, prescaler, freq1t);
 105   1          TIM_Timer3_Set1TMode(freq1t);
 106   1          TIM_Timer3_SetPreScaler(prescaler);
 107   1          TIM_Timer3_SetInitValue(init >> 8, init & 0xFF);
 108   1          EXTI_Timer3_SetIntState(intState);
 109   1      }
 110          
 111          void TIM_Timer4_Config(
 112              HAL_State_t freq1t, uint8_t prescaler, uint16_t frequency, HAL_State_t intState)
 113          {
 114   1          uint16_t init = _TIM_Timer234_InitValueCalculate(frequency, prescaler, freq1t);
 115   1          TIM_Timer4_Set1TMode(freq1t);
C51 COMPILER V9.60.7.0   FW_TIM                                                            10/18/2024 22:44:45 PAGE 3   

 116   1          TIM_Timer4_SetPreScaler(prescaler);
 117   1          TIM_Timer4_SetInitValue(init >> 8, init & 0xFF);
 118   1          EXTI_Timer4_SetIntState(intState);
 119   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    748    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      37
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
