C51 COMPILER V9.60.7.0   FW_UART                                                           10/01/2024 12:56:56 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE FW_UART
OBJECT MODULE PLACED IN .\Objects\fw_uart.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE FwLib_STC8\src\fw_uart.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\FwLib_S
                    -TC8\include) DEFINE(__CX51__,__CONF_MCU_MODEL=MCU_MODEL_STC8H1K28,__CONF_FOSC=24000000UL) DEBUG OBJECTEXTEND PRINT(.\Lis
                    -tings\fw_uart.lst) OBJECT(.\Objects\fw_uart.obj)

line level    source

   1          // Copyright 2021 IOsetting <iosetting(at)outlook.com>
   2          //
   3          // Licensed under the Apache License, Version 2.0 (the "License");
   4          // you may not use this file except in compliance with the License.
   5          // You may obtain a copy of the License at
   6          //
   7          //     http://www.apache.org/licenses/LICENSE-2.0
   8          //
   9          // Unless required by applicable law or agreed to in writing, software
  10          // distributed under the License is distributed on an "AS IS" BASIS,
  11          // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  12          // See the License for the specific language governing permissions and
  13          // limitations under the License.
  14          
  15          #include "fw_uart.h"
  16          #include "fw_tim.h"
  17          #include "fw_sys.h"
  18          
  19          
  20          int16_t UART_Timer_InitValueCalculate(uint32_t sysclk, HAL_State_t _1TMode, uint32_t baudrate)
  21          {
  22   1          uint32_t value;
  23   1          value = sysclk / (4 * baudrate);
  24   1          if (!_1TMode)
  25   1              value = value / 12;
  26   1          if (value > 0xFFFF)
  27   1              return 0;
  28   1          else
  29   1              return 0xFFFF - value + 1;
  30   1      }
  31          
  32          /**************************************************************************** /
  33           * UART1
  34          */
  35          
  36          void _UART1_ConfigDynUart(UART1_BaudSource_t baudSource, HAL_State_t _1TMode, int16_t init)
  37          {
  38   1          UART1_SetBaudSource(baudSource);
  39   1          // Timer1 configuration. Mode0 only, mode2 is covered by mode0 so it is unnecessary.
  40   1          if (baudSource == UART1_BaudSource_Timer1)
  41   1          {
  42   2              TIM_Timer1_Set1TMode(_1TMode);
  43   2              TIM_Timer1_SetMode(TIM_TimerMode_16BitAuto);
  44   2              TIM_Timer1_SetInitValue(init >> 8, init & 0xFF);
  45   2              TIM_Timer1_SetRunState(HAL_State_ON);
  46   2          }
  47   1          // Timer2 configuration
  48   1          else
  49   1          {
  50   2              // Timer2: 1T mode and initial value. prescaler is ignored, no interrupt.
  51   2              TIM_Timer2_Set1TMode(_1TMode);
  52   2              TIM_Timer2_SetInitValue(init >> 8, init & 0xFF);
  53   2              TIM_Timer2_SetRunState(HAL_State_ON);
C51 COMPILER V9.60.7.0   FW_UART                                                           10/01/2024 12:56:56 PAGE 2   

  54   2          }
  55   1      }
  56          void UART1_Config8bitUart(UART1_BaudSource_t baudSource, HAL_State_t _1TMode, uint32_t baudrate)
  57          {
  58   1          uint16_t init;
  59   1          SM0=0; SM1=1;
  60   1          init = UART_Timer_InitValueCalculate(__SYSCLOCK, _1TMode, baudrate);
  61   1          _UART1_ConfigDynUart(baudSource, _1TMode, init);
  62   1      }
  63          
  64          void UART1_Config9bitUart(UART1_BaudSource_t baudSource, HAL_State_t _1TMode, uint32_t baudrate)
  65          {
  66   1          uint16_t init;
  67   1          SM0=1; SM1=1;
  68   1          init = UART_Timer_InitValueCalculate(__SYSCLOCK, _1TMode, baudrate);
  69   1          _UART1_ConfigDynUart(baudSource, _1TMode, init);
  70   1      }
  71          
  72          void UART1_TxChar(char dat)
  73          {
  74   1          UART1_WriteBuffer(dat);
  75   1          while(!TI);
  76   1          UART1_ClearTxInterrupt();
  77   1      }
  78          
  79          void UART1_TxHex(uint8_t hex)
  80          {
  81   1          UART1_TxChar(HEX_TABLE[hex >> 4]);
  82   1          UART1_TxChar(HEX_TABLE[hex & 0xF]);
  83   1      }
  84          
  85          void UART1_TxString(uint8_t *str)
  86          {
  87   1          while (*str) UART1_TxChar(*str++);
  88   1      }
  89          
  90          int putchar(int dat) {
  91   1          UART1_WriteBuffer(dat);
  92   1          while(!TI);
  93   1          UART1_ClearTxInterrupt();
  94   1          return dat;
  95   1      }
  96          
  97          
  98          /**************************************************************************** /
  99           * UART2
 100          */
 101          
 102          void UART2_Config(HAL_State_t _1TMode, uint32_t baudrate)
 103          {
 104   1          uint16_t init;
 105   1      
 106   1          init = UART_Timer_InitValueCalculate(__SYSCLOCK, _1TMode, baudrate);
 107   1          // Timer2: 1T mode and initial value. prescaler is ignored, no interrupt.
 108   1          TIM_Timer2_Set1TMode(_1TMode);
 109   1          TIM_Timer2_SetInitValue(init >> 8, init & 0xFF);
 110   1          TIM_Timer2_SetRunState(HAL_State_ON);
 111   1      }
 112          
 113          void UART2_TxChar(char dat)
 114          {
 115   1          UART2_WriteBuffer(dat);
C51 COMPILER V9.60.7.0   FW_UART                                                           10/01/2024 12:56:56 PAGE 3   

 116   1          while(!UART2_TxFinished());
 117   1          UART2_ClearTxInterrupt();
 118   1      }
 119          
 120          void UART2_TxHex(uint8_t hex)
 121          {
 122   1          UART2_TxChar(HEX_TABLE[hex >> 4]);
 123   1          UART2_TxChar(HEX_TABLE[hex & 0xF]);
 124   1      }
 125          
 126          void UART2_TxString(uint8_t *str)
 127          {
 128   1          while (*str) UART2_TxChar(*str++);
 129   1      }
 130          
 131          
 132          /**************************************************************************** /
 133           * UART3
 134          */
 135          
 136          void UART3_ConfigOnTimer2(HAL_State_t _1TMode, uint32_t baudrate)
 137          {
 138   1          uint16_t init;
 139   1      
 140   1          UART3_SetBaudSource(0x00);
 141   1          init = UART_Timer_InitValueCalculate(__SYSCLOCK, _1TMode, baudrate);
 142   1          // Timer2: 1T mode and initial value. prescaler is ignored, no interrupt.
 143   1          TIM_Timer2_Set1TMode(_1TMode);
 144   1          TIM_Timer2_SetInitValue(init >> 8, init & 0xFF);
 145   1          TIM_Timer2_SetRunState(HAL_State_ON);
 146   1      }
 147          
 148          void UART3_ConfigOnTimer3(HAL_State_t _1TMode, uint32_t baudrate)
 149          {
 150   1          uint16_t init;
 151   1      
 152   1          UART3_SetBaudSource(0x01);
 153   1          init = UART_Timer_InitValueCalculate(__SYSCLOCK, _1TMode, baudrate);
 154   1          // Timer3: 1T mode and initial value. prescaler is ignored, no interrupt.
 155   1          TIM_Timer3_Set1TMode(_1TMode);
 156   1          TIM_Timer3_SetInitValue(init >> 8, init & 0xFF);
 157   1          TIM_Timer3_SetRunState(HAL_State_ON);
 158   1      }
 159          
 160          
 161          /**************************************************************************** /
 162           * UART4
 163          */
 164          
 165          void UART4_ConfigOnTimer2(HAL_State_t _1TMode, uint32_t baudrate)
 166          {
 167   1          uint16_t init;
 168   1      
 169   1          UART4_SetBaudSource(0x00);
 170   1          init = UART_Timer_InitValueCalculate(__SYSCLOCK, _1TMode, baudrate);
 171   1          TIM_Timer2_Set1TMode(_1TMode);
 172   1          TIM_Timer2_SetInitValue(init >> 8, init & 0xFF);
 173   1          TIM_Timer2_SetRunState(HAL_State_ON);
 174   1      }
 175          
 176          void UART4_ConfigOnTimer4(HAL_State_t _1TMode, uint32_t baudrate)
 177          {
C51 COMPILER V9.60.7.0   FW_UART                                                           10/01/2024 12:56:56 PAGE 4   

 178   1          uint16_t init;
 179   1      
 180   1          UART4_SetBaudSource(0x01);
 181   1          init = UART_Timer_InitValueCalculate(__SYSCLOCK, _1TMode, baudrate);
 182   1          TIM_Timer4_Set1TMode(_1TMode);
 183   1          TIM_Timer4_SetInitValue(init >> 8, init & 0xFF);
 184   1          TIM_Timer4_SetRunState(HAL_State_ON);
 185   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    768    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      56
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
